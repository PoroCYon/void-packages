From 9bce4ca0c3e18dbf0f9439ab737d0fafb092bc71 Mon Sep 17 00:00:00 2001
From: blackle <isabelle@blackle-mori.com>
Date: Sun, 24 Nov 2019 20:40:52 -0500
Subject: [PATCH 01/18] Add 'scale' setting that allows user to render shader
 at a fraction of the window resolution

(fixed the patch wrt. new commits in upstream     -poro)
---
 README.md                      |  2 ++
 src/Renderer.h                 |  2 ++
 src/main.cpp                   | 13 +++++++++++--
 src/platform_glfw/Renderer.cpp | 31 +++++++++++++++++++++++++++++++
 4 files changed, 46 insertions(+), 2 deletions(-)

diff --git a/README.md b/README.md
index 7107148..b0b31e6 100644
--- a/README.md
+++ b/README.md
@@ -34,6 +34,8 @@ The file can have the following contents: (all fields are optional)
   "window":{ // default window size / state; if there's a setup dialog, it will override it
     "width":1920,
     "height":1080,
+    "scale":0.5, //render the shader at 1/2 the size of the window and scale up
+    "linearFilter":true, //use linear filtering when scaling up
     "fullscreen":true,
   },
   "audio":{ // default audio device settings; if there's a setup dialog, it will override it
diff --git a/src/Renderer.h b/src/Renderer.h
index db0c27f..fe84fff 100644
--- a/src/Renderer.h
+++ b/src/Renderer.h
@@ -10,6 +10,8 @@ typedef struct
 {
   int nWidth;
   int nHeight;
+  float fScale;
+  bool bLinearFilter;
   RENDERER_WINDOWMODE windowMode;
   bool bVsync;
 } RENDERER_SETTINGS;
diff --git a/src/main.cpp b/src/main.cpp
index cb73826..73415b5 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -109,6 +109,8 @@ int main(int argc, const char *argv[])
       settings.sFFT.bUseRecordingDevice = options.get<jsonxx::Object>("audio").get<jsonxx::Boolean>("useInput");
   }
 
+  settings.sRenderer.fScale = 1.0f;
+  settings.sRenderer.bLinearFilter = false;
   settings.sRenderer.bVsync = false;
 #ifdef _DEBUG
   settings.sRenderer.nWidth = 1280;
@@ -118,17 +120,24 @@ int main(int argc, const char *argv[])
   settings.sRenderer.nWidth = 1920;
   settings.sRenderer.nHeight = 1080;
   settings.sRenderer.windowMode = RENDERER_WINDOWMODE_FULLSCREEN;
-  if (options.has<jsonxx::Object>("window"))
+  if (!options.empty() && options.has<jsonxx::Object>("window"))
   {
     if (options.get<jsonxx::Object>("window").has<jsonxx::Number>("width"))
       settings.sRenderer.nWidth = options.get<jsonxx::Object>("window").get<jsonxx::Number>("width");
     if (options.get<jsonxx::Object>("window").has<jsonxx::Number>("height"))
       settings.sRenderer.nHeight = options.get<jsonxx::Object>("window").get<jsonxx::Number>("height");
+    if (options.get<jsonxx::Object>("window").has<jsonxx::Number>("scale"))
+      settings.sRenderer.fScale = options.get<jsonxx::Object>("window").get<jsonxx::Number>("scale");
+    if (options.get<jsonxx::Object>("window").has<jsonxx::Boolean>("linearFilter"))
+      settings.sRenderer.bLinearFilter = options.get<jsonxx::Object>("window").get<jsonxx::Boolean>("linearFilter");
     if (options.get<jsonxx::Object>("window").has<jsonxx::Boolean>("fullscreen"))
       settings.sRenderer.windowMode = options.get<jsonxx::Object>("window").get<jsonxx::Boolean>("fullscreen") ? RENDERER_WINDOWMODE_FULLSCREEN : RENDERER_WINDOWMODE_WINDOWED;
   }
+  if (settings.sRenderer.fScale < 0.0f) settings.sRenderer.fScale = 0.0f;
+  if (settings.sRenderer.fScale > 1.0f) settings.sRenderer.fScale = 1.0f;
   if (!SetupDialog::Open( &settings ))
   {
+    printf("SetupDialog::Open failed\n");
     return -1;
   }
 #endif
@@ -479,7 +488,7 @@ int main(int argc, const char *argv[])
     Renderer::keyEventBufferCount = 0;
 
     Renderer::SetShaderConstant( "fGlobalTime", time );
-    Renderer::SetShaderConstant( "v2Resolution", settings.sRenderer.nWidth, settings.sRenderer.nHeight );
+    Renderer::SetShaderConstant( "v2Resolution", settings.sRenderer.nWidth*settings.sRenderer.fScale, settings.sRenderer.nHeight*settings.sRenderer.fScale );
 
     for (std::map<int,std::string>::iterator it = midiRoutes.begin(); it != midiRoutes.end(); it++)
     {
diff --git a/src/platform_glfw/Renderer.cpp b/src/platform_glfw/Renderer.cpp
index e44d246..77a17fe 100644
--- a/src/platform_glfw/Renderer.cpp
+++ b/src/platform_glfw/Renderer.cpp
@@ -166,6 +166,8 @@ namespace Renderer
   bool run = true;
 
   GLuint theShader = 0;
+  GLuint glhShaderFB = 0;
+  GLuint glhShaderTex = 0;
   GLuint glhVertexShader = 0;
   GLuint glhFullscreenQuadVB = 0;
   GLuint glhFullscreenQuadVA = 0;
@@ -175,6 +177,8 @@ namespace Renderer
 
   int nWidth = 0;
   int nHeight = 0;
+  float fScale = 1.0f;
+  bool bLinearFilter = false;
 
   void MatrixOrthoOffCenterLH(float * pout, float l, float r, float b, float t, float zn, float zf)
   {
@@ -227,6 +231,8 @@ namespace Renderer
 
     nWidth = settings->nWidth;
     nHeight = settings->nHeight;
+    fScale = settings->fScale;
+    bLinearFilter = settings->bLinearFilter;
 
     glfwWindowHint(GLFW_RED_BITS, 8);
     glfwWindowHint(GLFW_GREEN_BITS, 8);
@@ -306,6 +312,20 @@ namespace Renderer
     nWidth = settings->nWidth = fbWidth;
     nHeight = settings->nHeight = fbHeight;
     printf("[GLFW] Obtained framebuffer size: %d x %d\n", fbWidth, fbHeight);
+
+    if (fScale != 1.0f) {
+      glGenTextures( 1, &glhShaderTex );
+      glBindTexture( GL_TEXTURE_2D, glhShaderTex );
+      glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
+      glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );
+      glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA32F, nWidth*fScale, nHeight*fScale, 0, GL_RGBA, GL_FLOAT, NULL );
+      glBindTexture( GL_TEXTURE_2D, 0 );
+
+      glGenFramebuffers( 1, &glhShaderFB );
+      glBindFramebuffer( GL_FRAMEBUFFER, glhShaderFB );
+      glFramebufferTexture( GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, glhShaderTex, 0 );
+      glBindFramebuffer( GL_FRAMEBUFFER, 0 );
+    }
     
     static float pFullscreenQuadVertices[] =
     {
@@ -597,6 +617,10 @@ namespace Renderer
   {
     glBindVertexArray(glhFullscreenQuadVA);
 
+    if (fScale != 1.0f) {
+      glBindFramebuffer(GL_FRAMEBUFFER, glhShaderFB);
+    }
+
     glUseProgram(theShader);
 
     glBindBuffer( GL_ARRAY_BUFFER, glhFullscreenQuadVB );
@@ -625,6 +649,13 @@ namespace Renderer
       glDisableVertexAttribArray( position );
 
     glUseProgram(0);
+
+    if (fScale != 1.0f) {
+      glBindFramebuffer(GL_FRAMEBUFFER, 0);
+      glBindFramebuffer(GL_READ_FRAMEBUFFER, glhShaderFB);
+      glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);
+      glBlitFramebuffer(0, 0, nWidth*fScale, nHeight*fScale, 0, 0, nWidth, nHeight, GL_COLOR_BUFFER_BIT, bLinearFilter ? GL_LINEAR : GL_NEAREST);
+    }
   }
 
   bool ReloadShader( const char * szShaderCode, int nShaderCodeSize, char * szErrorBuffer, int nErrorBufferSize )
-- 
2.29.2

