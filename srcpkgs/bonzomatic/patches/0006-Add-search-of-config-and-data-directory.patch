From 431dd8dde039920fdfc0f067453e592a9bcecdbe Mon Sep 17 00:00:00 2001
From: Florent CURE <florent.cure@protonmail.com>
Date: Sun, 26 May 2019 19:14:12 +0100
Subject: [PATCH 06/18] Add search of config and data directory

This work is handled by the ApplicationSettings class. On linux, it searches the config.json file first in working directory (directory level), then in ~/.config/bonzomatic (user level),  then in /etc/bonzomatic (system level).
It also infers the data directory (where are stored textures and other files) based on that location. In directory level and user level it is the same directory, in system level it's /usr/share/bonzomatic.

(fixed so that it doesn't interfere with upstream commits     -poro)
---
 CMakeLists.txt                  | 16 ++++++--
 config.json                     | 41 +++++++++++++++++++++
 src/Capture.h                   |  6 +--
 src/Config.h                    | 61 +++++++++++++++++++++++++++++++
 src/Utils.h                     | 11 ++++++
 src/capturing/Capture_Dummy.cpp |  6 +--
 src/capturing/Capture_NDI.cpp   |  6 +--
 src/main.cpp                    | 51 +++++++++++---------------
 src/platform_common/Config.cpp  | 38 +++++++++++++++++++
 src/platform_common/Utils.cpp   | 20 ++++++++++
 src/platform_linux/Config.cpp   | 65 +++++++++++++++++++++++++++++++++
 11 files changed, 280 insertions(+), 41 deletions(-)
 create mode 100644 config.json
 create mode 100644 src/Config.h
 create mode 100644 src/Utils.h
 create mode 100644 src/platform_common/Config.cpp
 create mode 100644 src/platform_common/Utils.cpp
 create mode 100644 src/platform_linux/Config.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b6fc682..2e520db 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -34,7 +34,7 @@ endif ()
 
 if (WIN32)
   set(BONZOMATIC_WINDOWS_FLAVOR "GLFW" CACHE STRING "Windows renderer flavor selected at CMake configure time (DX11, DX9 or GLFW)")
-  set_property(CACHE BONZOMATIC_WINDOWS_FLAVOR PROPERTY STRINGS DX11 DX9 GLFW) 
+  set_property(CACHE BONZOMATIC_WINDOWS_FLAVOR PROPERTY STRINGS DX11 DX9 GLFW)
 endif ()
 
 if (NOT (UNIX AND (NOT APPLE))) #if not linux
@@ -152,7 +152,7 @@ set(BZC_PROJECT_LIBS ${BZC_PROJECT_LIBS} bzc_jsonxx)
 ##############################################################################
 # NDI
 if (WIN32 AND BONZOMATIC_NDI)
-  if(DEFINED ENV{NDI_SDK_DIR}) 
+  if(DEFINED ENV{NDI_SDK_DIR})
     set(NDI_SDK_DIR "$ENV{NDI_SDK_DIR}")
   else()
     message(FATAL_ERROR "Could not find NDI SDK. The NDI_SDK_DIR environment variable must be set to the SDK path.")
@@ -331,7 +331,9 @@ if (APPLE)
   set(BZC_PLATFORM_SRCS
     ${CMAKE_SOURCE_DIR}/src/platform_glfw/Renderer.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_common/FFT.cpp
-    ${CMAKE_SOURCE_DIR}/src/platform_common/MIDIDummy.cpp
+    ${CMAKE_SOURCE_DIR}/src/platform_common/Utils.cpp
+    ${CMAKE_SOURCE_DIR}/src/platform_common/Config.cpp
+    ${CMAKE_SOURCE_DIR}/src/platform_x11/MIDI.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_osx/Misc.mm
     ${CMAKE_SOURCE_DIR}/src/platform_x11/Timer.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_osx/SetupDialog.cpp
@@ -347,11 +349,13 @@ elseif (UNIX)
   set(BZC_PLATFORM_SRCS
     ${CMAKE_SOURCE_DIR}/src/platform_glfw/Renderer.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_common/FFT.cpp
+    ${CMAKE_SOURCE_DIR}/src/platform_common/Utils.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_x11/MIDI.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_x11/Misc.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_x11/SetupDialog.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_x11/Timer.cpp
     ${CMAKE_SOURCE_DIR}/src/platform_x11/Clipboard.cpp
+    ${CMAKE_SOURCE_DIR}/src/platform_linux/Config.cpp
   )
   source_group("Bonzomatic\\Platform" FILES ${BZC_PLATFORM_SRCS})
 elseif (WIN32)
@@ -359,6 +363,8 @@ elseif (WIN32)
     set(BZC_PLATFORM_SRCS
       ${CMAKE_SOURCE_DIR}/src/platform_w32_dx11/Renderer.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_common/FFT.cpp
+      ${CMAKE_SOURCE_DIR}/src/platform_common/Utils.cpp
+      ${CMAKE_SOURCE_DIR}/src/platform_common/Config.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/MIDI.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/Misc.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/SetupDialog.cpp
@@ -370,6 +376,8 @@ elseif (WIN32)
     set(BZC_PLATFORM_SRCS
       ${CMAKE_SOURCE_DIR}/src/platform_w32_dx9/Renderer.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_common/FFT.cpp
+      ${CMAKE_SOURCE_DIR}/src/platform_common/Utils.cpp
+      ${CMAKE_SOURCE_DIR}/src/platform_common/Config.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/MIDI.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/Misc.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/SetupDialog.cpp
@@ -381,6 +389,8 @@ elseif (WIN32)
     set(BZC_PLATFORM_SRCS
       ${CMAKE_SOURCE_DIR}/src/platform_glfw/Renderer.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_common/FFT.cpp
+      ${CMAKE_SOURCE_DIR}/src/platform_common/Utils.cpp
+      ${CMAKE_SOURCE_DIR}/src/platform_common/Config.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/MIDI.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/Misc.cpp
       ${CMAKE_SOURCE_DIR}/src/platform_w32_common/SetupDialog.cpp
diff --git a/config.json b/config.json
new file mode 100644
index 0000000..02a3ec1
--- /dev/null
+++ b/config.json
@@ -0,0 +1,41 @@
+{
+  "window":{ // default window size / state, if there's a setup dialog, it will override it
+    "width":1920,
+    "height":1080,
+    "fullscreen":true,
+  },
+//  "font":{ // all paths in the file are also relative to the binary, but again, can be absolute paths if that's more convenient
+//    "file":"Input-Regular_(InputMono-Medium).ttf",
+//    "size":16,
+//  },
+  "rendering":{
+    "fftSmoothFactor": 0.9, // 0.0 means there's no smoothing at all, 1.0 means the FFT is completely smoothed flat
+    "fftAmplification": 1.0, // 1.0 means no change, larger values will result in brighter/stronger bands, smaller values in darker/weaker ones
+  },
+  "textures":{ // the keys below will become the shader variable names
+    "texChecker":"textures/checker.png",
+    "texNoise":"textures/noise.png",
+    "texTex1":"textures/tex1.jpg",
+  },
+  "gui":{
+    "outputHeight": 200,
+    "opacity": 192, // 255 means the editor occludes the effect completely, 0 means the editor is fully transparent
+    "texturePreviewWidth": 128,
+    "spacesForTabs": false,
+    "tabSize": 8,
+    "visibleWhitespace": false,
+    "autoIndent": "smart", // can be "none", "preserve" or "smart"
+  },
+  "midi":{ // the keys below will become the shader variable names, the values are the CC numbers
+    "fMidiKnob": 16, // e.g. this would be CC#16, i.e. by default the leftmost knob on a nanoKONTROL 2
+  },
+  // this section is if you want to enable NDI streaming; otherwise just ignore it
+  "ndi":{
+    "enabled": true,
+    "connectionString": "<ndi_product something=\"123\"/>", // metadata sent to the receiver; completely optional
+    "identifier": "hello!", // additional string to the device name; helps source discovery/identification in the receiver if there are multiple sources on the network
+    "frameRate": 60.0, // frames per second
+    "progressive": true, // progressive or interleaved?
+  },
+  "postExitCmd":"copy_to_dropbox.bat" // this command gets ran when you quit Bonzomatic, and the shader filename gets passed to it as first parameter. Use this to take regular backups.
+}
\ No newline at end of file
diff --git a/src/Capture.h b/src/Capture.h
index fdfbce0..f164356 100644
--- a/src/Capture.h
+++ b/src/Capture.h
@@ -1,7 +1,7 @@
 namespace Capture
 {
-  void LoadSettings(jsonxx::Object & o);
-  bool Open(RENDERER_SETTINGS & settings);
+  void LoadSettings(const jsonxx::Object & o);
+  bool Open(const RENDERER_SETTINGS & settings);
   void CaptureFrame();
   void Close();
-}
\ No newline at end of file
+}
diff --git a/src/Config.h b/src/Config.h
new file mode 100644
index 0000000..732365e
--- /dev/null
+++ b/src/Config.h
@@ -0,0 +1,61 @@
+#pragma once
+
+#include "jsonxx.h"
+
+#include "Utils.h"
+
+#include <string>
+
+namespace Config
+{
+
+	class ApplicationSettings
+	{
+	public:
+		enum Location
+		{
+			SYSTEM,
+			USER,
+			DIRECTORY,
+			NONE
+		};
+
+		ApplicationSettings( const std::string& cfg_filename )
+			: location_( Location::NONE ), config_filename_( cfg_filename ) {}
+
+		void load()
+		{
+			find_location();
+			if( location_ != Location::NONE )
+			{
+				read_config();
+			}
+		}
+
+		const jsonxx::Object& get_options() const { return options_; }
+		const std::string& get_config_directory_() const { return config_directory_; }
+		const std::string& get_data_directory() const { return data_directory_; }
+
+	private:
+		void find_location();
+		void read_config()
+		{
+			std::string config_path( config_directory_ + "/" + config_filename_ );
+			std::vector< char > data;
+			Utils::read_file( config_path, data );
+			options_.parse( &data[ 0 ] );
+		}
+
+		Location location_;
+		std::string config_filename_;
+		jsonxx::Object options_;
+
+		std::string config_directory_;
+		std::string data_directory_;
+	};
+
+
+
+
+
+}
diff --git a/src/Utils.h b/src/Utils.h
new file mode 100644
index 0000000..3fb3a12
--- /dev/null
+++ b/src/Utils.h
@@ -0,0 +1,11 @@
+#pragma once
+
+#include <string>
+#include <vector>
+
+namespace Utils
+{
+
+	bool read_file( const std::string& filename, std::vector< char >& out );
+
+}
\ No newline at end of file
diff --git a/src/capturing/Capture_Dummy.cpp b/src/capturing/Capture_Dummy.cpp
index b0ca4f2..0bdcf7e 100644
--- a/src/capturing/Capture_Dummy.cpp
+++ b/src/capturing/Capture_Dummy.cpp
@@ -3,10 +3,10 @@
 
 namespace Capture
 {
-  void LoadSettings(jsonxx::Object & o)
+  void LoadSettings(const jsonxx::Object & o)
   {
   }
-  bool Open(RENDERER_SETTINGS & settings)
+  bool Open(const RENDERER_SETTINGS & settings)
   {
     return true;
   }
@@ -16,4 +16,4 @@ namespace Capture
   void Close()
   {
   }
-}
\ No newline at end of file
+}
diff --git a/src/capturing/Capture_NDI.cpp b/src/capturing/Capture_NDI.cpp
index 1d7609e..68fbb0d 100644
--- a/src/capturing/Capture_NDI.cpp
+++ b/src/capturing/Capture_NDI.cpp
@@ -16,7 +16,7 @@ namespace Capture
   NDIlib_video_frame_v2_t pNDIFrame;
   NDIlib_send_instance_t pNDI_send;
 
-  void LoadSettings(jsonxx::Object & o)
+  void LoadSettings(const jsonxx::Object & o)
   {
     if (o.has<jsonxx::Object>("ndi"))
     {
@@ -32,7 +32,7 @@ namespace Capture
         bNDIProgressive = o.get<jsonxx::Object>("ndi").get<jsonxx::Boolean>("progressive");
     }
   }
-  bool Open(RENDERER_SETTINGS & settings)
+  bool Open(const RENDERER_SETTINGS & settings)
   {
     if (bNDIEnabled)
     {
@@ -105,4 +105,4 @@ namespace Capture
       NDIlib_destroy();
     }
   }
-}
\ No newline at end of file
+}
diff --git a/src/main.cpp b/src/main.cpp
index cf6def4..ed8436b 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -9,6 +9,8 @@
 #include <unistd.h>
 #endif
 
+#include <iostream>
+
 #include "ShaderEditor.h"
 #include "Renderer.h"
 #include "FFT.h"
@@ -19,6 +21,7 @@
 #include "jsonxx.h"
 #include "Capture.h"
 #include "SetupDialog.h"
+#include "Config.h"
 
 unsigned int ParseColor(const std::string& color) {
   if (color.size() < 6 || color.size() > 8) return 0xFFFFFFFF;
@@ -65,38 +68,25 @@ void ReplaceTokens( std::string &sDefShader, const char * sTokenBegin, const cha
   }
 }
 
+
+
+
+
 int main(int argc, const char *argv[])
 {
   Misc::PlatformStartup();
 
-  const char * configFile = "config.json";
+  std::string cfg_file_name( "config.json" );
+
   if ( argc > 1 )
   {
-    configFile = argv[ 1 ];
-    printf( "Loading config file '%s'...\n", configFile );
-  }
-  else
-  {
-    char configPath[ 256 ] = { 0 };
-    if ( getcwd( configPath, 255 ) )
-    {
-      printf( "Looking for config.json in '%s'...\n", configPath );
-    }
+    cfg_file_name = argv[ 1 ];
   }
+  std::cout << "Loading config file '" << cfg_file_name << "'...\n";
 
-  jsonxx::Object options;
-  FILE * fConf = fopen( configFile, "rb" );
-  if (fConf)
-  {
-    printf("Config file found, parsing...\n");
-
-    char szConfig[65535];
-    memset( szConfig, 0, 65535 );
-    fread( szConfig, 1, 65535, fConf );
-    fclose(fConf);
-
-    options.parse( szConfig );
-  }
+  Config::ApplicationSettings app_settings( cfg_file_name );
+  app_settings.load();
+  const jsonxx::Object& options = app_settings.get_options();
 
   FFT::Create();
 
@@ -206,12 +196,15 @@ int main(int argc, const char *argv[])
       std::map<std::string, jsonxx::Value*> tex = options.get<jsonxx::Object>("textures").kv_map();
       for (std::map<std::string, jsonxx::Value*>::iterator it = tex.begin(); it != tex.end(); it++)
       {
-        const char * fn = it->second->string_value_->c_str();
-        printf("* %s...\n",fn);
-        Renderer::Texture * tex = Renderer::CreateRGBA8TextureFromFile( fn );
+        //const char * fn = it->second->string_value_->c_str();
+        std::string file_name = app_settings.get_data_directory() + std::string( "/" ) + std::string( it->second->string_value_->c_str() );
+        //printf("* %s...\n",fn);
+        std::cout << file_name << "...\n";
+        //Renderer::Texture * tex = Renderer::CreateRGBA8TextureFromFile( fn );
+        Renderer::Texture * tex = Renderer::CreateRGBA8TextureFromFile( file_name.c_str() );
         if (!tex)
         {
-          printf("Renderer::CreateRGBA8TextureFromFile(%s) failed\n",fn);
+          printf("Renderer::CreateRGBA8TextureFromFile(%s) failed\n",file_name.c_str());
           return -1;
         }
         textures[it->first] = tex;
@@ -476,7 +469,7 @@ int main(int argc, const char *argv[])
       {
         mShaderEditor.CommentSelection(ctLinesAll);
       }
-      else if (Renderer::keyEventBuffer[i].scanCode == 292 || (Renderer::keyEventBuffer[i].ctrl && Renderer::keyEventBuffer[i].scanCode == 'f')) // F11 or Ctrl/Cmd-f  
+      else if (Renderer::keyEventBuffer[i].scanCode == 292 || (Renderer::keyEventBuffer[i].ctrl && Renderer::keyEventBuffer[i].scanCode == 'f')) // F11 or Ctrl/Cmd-f
       {
         bShowGui = !bShowGui;
       }
diff --git a/src/platform_common/Config.cpp b/src/platform_common/Config.cpp
new file mode 100644
index 0000000..0caa5b6
--- /dev/null
+++ b/src/platform_common/Config.cpp
@@ -0,0 +1,38 @@
+#include "Config.h"
+
+#include <string>
+#include <fstream>
+
+#ifdef _WIN32
+#include <direct.h>
+#define getcwd _getcwd
+#else
+#include <unistd.h>
+#endif
+
+
+namespace Config
+{
+
+	void ApplicationSettings::find_location()
+	{
+		char cwd[ 256 ];
+		getcwd( cwd, 255 );
+		std::string curDir( cwd );
+
+		std::ifstream cfgFile( config_filename_ );
+		if( cfgFile.is_open() )
+		{
+			config_directory_ = curDir;
+			data_directory_ = curDir;
+			cfgFile.close();
+			location_ = Location::DIRECTORY;
+			std::cout << "Config file found in current directory (" << config_directory_ << ")...\n";
+			return;
+		}
+
+		config_directory_ = curDir;
+		location_ = Location::NONE;
+		std::cout << "No config file found, using default settings...\n";
+	}
+}
\ No newline at end of file
diff --git a/src/platform_common/Utils.cpp b/src/platform_common/Utils.cpp
new file mode 100644
index 0000000..8b67d13
--- /dev/null
+++ b/src/platform_common/Utils.cpp
@@ -0,0 +1,20 @@
+#include <vector>
+#include <string>
+#include <fstream>
+
+namespace Utils
+{
+
+	bool read_file( const std::string& filename, std::vector< char >& out )
+	{
+		std::ifstream fp( filename );
+		if( !fp.is_open() ) return false;
+		fp.seekg( 0, std::ios::end );
+		size_t file_size_in_byte = fp.tellg();
+		out.resize( file_size_in_byte );
+		fp.seekg( 0, std::ios::beg );
+		fp.read( &out[ 0 ], file_size_in_byte );
+		return true;
+	}
+
+}
\ No newline at end of file
diff --git a/src/platform_linux/Config.cpp b/src/platform_linux/Config.cpp
new file mode 100644
index 0000000..5fcec6a
--- /dev/null
+++ b/src/platform_linux/Config.cpp
@@ -0,0 +1,65 @@
+#include "Config.h"
+
+#include <fstream>
+#include <iostream>
+#include <vector>
+
+#include <unistd.h>
+
+
+namespace Config
+{
+
+	void ApplicationSettings::find_location()
+	{
+		const std::string sysPath( "/etc/bonzomatic" );
+		const std::string userPath( getenv( "HOME" ) );
+		const std::string localConfigPath = "/.config/bonzomatic";
+		std::string localPath = userPath + localConfigPath;
+
+		char cwd[ 256 ];
+		getcwd( cwd, 255 );
+		std::string curDir( cwd );
+
+	  	// 1. search in current directory
+		std::ifstream cfgFile( config_filename_ );
+		if( cfgFile.is_open() )
+		{
+			config_directory_ = curDir;
+			data_directory_ = curDir;
+			cfgFile.close();
+			location_ = Location::DIRECTORY;
+			std::cout << "Config file found in current directory (" << config_directory_ << ")...\n";
+			return;
+		}
+
+	  	// 2. search in user config path
+		std::ifstream userCfgFile( localPath + std::string( "/" ) + config_filename_ );
+		if( userCfgFile.is_open() )
+		{
+			config_directory_ = userPath;
+			data_directory_ = userPath;
+			userCfgFile.close();
+			location_ = Location::USER;
+			std::cout << "Config file found in user directory (" << config_directory_ << ")...\n";
+			return;
+		}
+
+	  	// 3. search in system config path
+		std::ifstream sysCfgFile( sysPath + std::string( "/" ) + config_filename_ );
+		if( sysCfgFile.is_open() )
+		{
+			config_directory_ = sysPath;
+			data_directory_ = "/usr/share/bonzomatic";
+			sysCfgFile.close();
+			location_ = Location::SYSTEM;
+			std::cout << "Config file found in system config path (" << config_directory_ << ")...\n";
+			return;
+		}
+
+		config_directory_ = curDir;
+		location_ = Location::NONE;
+		std::cout << "No config file found, using default settings...\n";
+	}
+
+}
\ No newline at end of file
-- 
2.30.0

