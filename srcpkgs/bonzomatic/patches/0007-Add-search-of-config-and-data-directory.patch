From 0a9bcec15b30eae4274942afe88355cb5fcad7fa Mon Sep 17 00:00:00 2001
From: Florent CURE <florent.cure@protonmail.com>
Date: Sun, 26 May 2019 19:14:12 +0100
Subject: [PATCH 07/21] Add search of config and data directory

This work is handled by the ApplicationSettings class. On linux, it searches the config.json file first in working directory (directory level), then in ~/.config/bonzomatic (user level),  then in /etc/bonzomatic (system level).
It also infers the data directory (where are stored textures and other files) based on that location. In directory level and user level it is the same directory, in system level it's /usr/share/bonzomatic.
---
 src/Config.cpp |  94 ++++++++++++++++++++++++++++++
 src/Config.h   |  45 +++++++++++++++
 src/main.cpp   | 152 ++++++++++++++++++++++++-------------------------
 3 files changed, 212 insertions(+), 79 deletions(-)

diff --git src/Config.cpp src/Config.cpp
new file mode 100644
index 0000000..860e36f
--- /dev/null
+++ src/Config.cpp
@@ -0,0 +1,94 @@
+#include "Config.h"
+
+#include <fstream>
+#include <iostream>
+#include <vector>
+
+#include <unistd.h>
+
+
+namespace Config
+{
+	ApplicationSettings::ApplicationSettings( const std::string& cfg_filename )
+		: _location( Location::NONE ), _config_filename( cfg_filename )
+	{
+
+	}
+
+	void ApplicationSettings::load()
+	{
+		find_location();
+
+		if( _location != Location::NONE )
+		{
+			read_config();
+		}
+
+
+	}
+
+	void ApplicationSettings::read_config()
+	{
+		std::string config_path( _config_directory + "/" + _config_filename );
+		std::ifstream fconf( config_path );
+		fconf.seekg( 0, std::ios::end );
+		size_t file_size_in_byte = fconf.tellg();
+		std::vector< char > data;
+		data.resize( file_size_in_byte );
+		fconf.seekg( 0, std::ios::beg );
+		fconf.read( &data[0], file_size_in_byte );
+		_options.parse( &data[ 0 ] );
+	}
+
+	void ApplicationSettings::find_location()
+	{
+		const std::string sysPath( "/etc/bonzomatic" );
+		const std::string userPath( getenv( "HOME" ) );
+		const std::string localConfigPath = "/.config/bonzomatic";
+		std::string localPath = userPath + localConfigPath;
+
+		char cwd[ 256 ];
+		getcwd( cwd, 255 );
+		std::string curDir( cwd );
+
+	  	// 1. search in current directory
+		std::ifstream cfgFile( _config_filename );
+		if( cfgFile.is_open() )
+		{
+			_config_directory = curDir;
+			_data_directory = curDir;
+			cfgFile.close();
+			_location = Location::DIRECTORY;
+			std::cout << "Config file found in current directory (" << _config_directory << ")...\n";
+			return;
+		}
+
+	  	// 2. search in user config path
+		std::ifstream userCfgFile( localPath + std::string( "/" ) + _config_filename );
+		if( userCfgFile.is_open() )
+		{
+			_config_directory = userPath;
+			_data_directory = userPath;
+			userCfgFile.close();
+			_location = Location::USER;
+			std::cout << "Config file found in user directory (" << _config_directory << ")...\n";
+			return;
+		}
+
+	  	// 3. search in system config path
+		std::ifstream sysCfgFile( sysPath + std::string( "/" ) + _config_filename );
+		if( sysCfgFile.is_open() )
+		{
+			_config_directory = sysPath;
+			_data_directory = "/usr/share/bonzomatic";
+			sysCfgFile.close();
+			_location = Location::SYSTEM;
+			std::cout << "Config file found in system config path (" << _config_directory << ")...\n";
+			return;
+		}
+
+		_config_directory = curDir;
+		_location = Location::NONE;
+		std::cout << "No config file found, using default ApplicationSettings...\n";
+	}
+}
\ No newline at end of file
diff --git src/Config.h src/Config.h
new file mode 100644
index 0000000..8f567bc
--- /dev/null
+++ src/Config.h
@@ -0,0 +1,45 @@
+#pragma once
+
+#include "jsonxx.h"
+
+#include <string>
+
+namespace Config
+{
+
+	class ApplicationSettings
+	{
+	public:
+		enum Location
+		{
+			SYSTEM,
+			USER,
+			DIRECTORY,
+			NONE
+		};
+
+		ApplicationSettings( const std::string& cfg_filename );
+
+		void load();
+
+		const jsonxx::Object get_options() const { return _options; }
+		const std::string get_config_directory() const { return _config_directory; }
+		const std::string get_data_directory() const { return _data_directory; }
+
+	private:
+		void find_location();
+		void read_config();
+
+		Location _location;
+		std::string _config_filename;
+		jsonxx::Object _options;
+
+		std::string _config_directory;
+		std::string _data_directory;
+	};
+
+
+
+
+
+}
\ No newline at end of file
diff --git src/main.cpp src/main.cpp
index af64e10..65578a8 100644
--- src/main.cpp
+++ src/main.cpp
@@ -9,6 +9,8 @@
 #include <unistd.h>
 #endif
 
+#include <iostream>
+
 #include "ShaderEditor.h"
 #include "Renderer.h"
 #include "FFT.h"
@@ -18,6 +20,8 @@
 #include "UniConversion.h"
 #include "jsonxx.h"
 #include "Capture.h"
+// #FLO
+#include "Config.h"
 
 unsigned int ParseColor(const std::string& color) {
   if (color.size() < 6 || color.size() > 8) return 0xFFFFFFFF;
@@ -64,38 +68,24 @@ void ReplaceTokens( std::string &sDefShader, const char * sTokenBegin, const cha
   }
 }
 
+
+
+
+
 int main(int argc, const char *argv[])
 {
   Misc::PlatformStartup();
 
-  const char * configFile = "config.json";
+  std::string cfg_file_name( "config.json" );
+
   if ( argc > 1 )
   {
-    configFile = argv[ 1 ];
-    printf( "Loading config file '%s'...\n", configFile );
-  }
-  else
-  {
-    char configPath[ 256 ] = { 0 };
-    if ( getcwd( configPath, 255 ) )
-    {
-      printf( "Looking for config.json in '%s'...\n", configPath );
-    }
+    cfg_file_name = argv[ 1 ];
   }
+  std::cout << "Loading config file '" << cfg_file_name << "'...\n";
 
-  jsonxx::Object options;
-  FILE * fConf = fopen( configFile, "rb" );
-  if (fConf)
-  {
-    printf("Config file found, parsing...\n");
-
-    char szConfig[65535];
-    memset( szConfig, 0, 65535 );
-    fread( szConfig, 1, 65535, fConf );
-    fclose(fConf);
-
-    options.parse( szConfig );
-  }
+  Config::ApplicationSettings app_settings( cfg_file_name );
+  app_settings.load();
 
   RENDERER_SETTINGS settings;
   settings.fScale = 1.0f;
@@ -109,18 +99,19 @@ int main(int argc, const char *argv[])
   settings.nWidth = 1920;
   settings.nHeight = 1080;
   settings.windowMode = RENDERER_WINDOWMODE_FULLSCREEN;
-  if (options.has<jsonxx::Object>("window"))
+  jsonxx::Object opts = app_settings.get_options();
+  if (opts.has<jsonxx::Object>("window"))
   {
-    if (options.get<jsonxx::Object>("window").has<jsonxx::Number>("width"))
-      settings.nWidth = options.get<jsonxx::Object>("window").get<jsonxx::Number>("width");
-    if (options.get<jsonxx::Object>("window").has<jsonxx::Number>("height"))
-      settings.nHeight = options.get<jsonxx::Object>("window").get<jsonxx::Number>("height");
-    if (options.get<jsonxx::Object>("window").has<jsonxx::Number>("scale"))
-      settings.fScale = options.get<jsonxx::Object>("window").get<jsonxx::Number>("scale");
-    if (options.get<jsonxx::Object>("window").has<jsonxx::Boolean>("linearFilter"))
-      settings.bLinearFilter = options.get<jsonxx::Object>("window").get<jsonxx::Boolean>("linearFilter");
-    if (options.get<jsonxx::Object>("window").has<jsonxx::Boolean>("fullscreen"))
-      settings.windowMode = options.get<jsonxx::Object>("window").get<jsonxx::Boolean>("fullscreen") ? RENDERER_WINDOWMODE_FULLSCREEN : RENDERER_WINDOWMODE_WINDOWED;
+    if (opts.get<jsonxx::Object>("window").has<jsonxx::Number>("width"))
+      settings.nWidth = opts.get<jsonxx::Object>("window").get<jsonxx::Number>("width");
+    if (opts.get<jsonxx::Object>("window").has<jsonxx::Number>("height"))
+      settings.nHeight = opts.get<jsonxx::Object>("window").get<jsonxx::Number>("height");
+    if (opts.get<jsonxx::Object>("window").has<jsonxx::Boolean>("fullscreen"))
+      settings.windowMode = opts.get<jsonxx::Object>("window").get<jsonxx::Boolean>("fullscreen") ? RENDERER_WINDOWMODE_FULLSCREEN : RENDERER_WINDOWMODE_WINDOWED;
+    if (opts.get<jsonxx::Object>("window").has<jsonxx::Number>("scale"))
+      settings.fScale = opts.get<jsonxx::Object>("window").get<jsonxx::Number>("scale");
+    if (opts.get<jsonxx::Object>("window").has<jsonxx::Boolean>("linearFilter"))
+      settings.bLinearFilter = opts.get<jsonxx::Object>("window").get<jsonxx::Boolean>("linearFilter");
   }
   if (settings.fScale < 0.0f) settings.fScale = 0.0f;
   if (settings.fScale > 1.0f) settings.fScale = 1.0f;
@@ -176,40 +167,43 @@ int main(int argc, const char *argv[])
 
   std::string sPostExitCmd;
 
-  if (!options.empty())
+  if (!opts.empty())
   {
-    if (options.has<jsonxx::Object>("rendering"))
+    if (opts.has<jsonxx::Object>("rendering"))
     {
-      if (options.get<jsonxx::Object>("rendering").has<jsonxx::Number>("fftSmoothFactor"))
-        fFFTSmoothingFactor = options.get<jsonxx::Object>("rendering").get<jsonxx::Number>("fftSmoothFactor");
-      if (options.get<jsonxx::Object>("rendering").has<jsonxx::Number>("fftAmplification"))
-        FFT::fAmplification = options.get<jsonxx::Object>("rendering").get<jsonxx::Number>("fftAmplification");
+      if (opts.get<jsonxx::Object>("rendering").has<jsonxx::Number>("fftSmoothFactor"))
+        fFFTSmoothingFactor = opts.get<jsonxx::Object>("rendering").get<jsonxx::Number>("fftSmoothFactor");
+      if (opts.get<jsonxx::Object>("rendering").has<jsonxx::Number>("fftAmplification"))
+        FFT::fAmplification = opts.get<jsonxx::Object>("rendering").get<jsonxx::Number>("fftAmplification");
     }
 
-    if (options.has<jsonxx::Object>("textures"))
+    if (opts.has<jsonxx::Object>("textures"))
     {
       printf("Loading textures...\n");
-      std::map<std::string, jsonxx::Value*> tex = options.get<jsonxx::Object>("textures").kv_map();
+      std::map<std::string, jsonxx::Value*> tex = opts.get<jsonxx::Object>("textures").kv_map();
       for (std::map<std::string, jsonxx::Value*>::iterator it = tex.begin(); it != tex.end(); it++)
       {
-        const char * fn = it->second->string_value_->c_str();
-        printf("* %s...\n",fn);
-        Renderer::Texture * tex = Renderer::CreateRGBA8TextureFromFile( fn );
+        //const char * fn = it->second->string_value_->c_str();
+        std::string file_name = app_settings.get_data_directory() + std::string( "/" ) + std::string( it->second->string_value_->c_str() );
+        //printf("* %s...\n",fn);
+        std::cout << file_name << "...\n";
+        //Renderer::Texture * tex = Renderer::CreateRGBA8TextureFromFile( fn );
+        Renderer::Texture * tex = Renderer::CreateRGBA8TextureFromFile( file_name.c_str() );
         if (!tex)
         {
-          printf("Renderer::CreateRGBA8TextureFromFile(%s) failed\n",fn);
+          printf("Renderer::CreateRGBA8TextureFromFile(%s) failed\n",file_name.c_str());
           return -1;
         }
         textures[it->first] = tex;
       }
     }
-    if (options.has<jsonxx::Object>("font"))
+    if (opts.has<jsonxx::Object>("font"))
     {
-      if (options.get<jsonxx::Object>("font").has<jsonxx::Number>("size"))
-        editorOptions.nFontSize = options.get<jsonxx::Object>("font").get<jsonxx::Number>("size");
-      if (options.get<jsonxx::Object>("font").has<jsonxx::String>("file"))
+      if (opts.get<jsonxx::Object>("font").has<jsonxx::Number>("size"))
+        editorOptions.nFontSize = opts.get<jsonxx::Object>("font").get<jsonxx::Number>("size");
+      if (opts.get<jsonxx::Object>("font").has<jsonxx::String>("file"))
       {
-        std::string fontpath = options.get<jsonxx::Object>("font").get<jsonxx::String>("file");
+        std::string fontpath = opts.get<jsonxx::Object>("font").get<jsonxx::String>("file");
         if (!Misc::FileExists(fontpath.c_str()))
         {
           printf("Font path (%s) is invalid!\n", fontpath.c_str());
@@ -218,23 +212,23 @@ int main(int argc, const char *argv[])
         editorOptions.sFontPath = fontpath;
       }
     }
-    if (options.has<jsonxx::Object>("gui"))
+    if (opts.has<jsonxx::Object>("gui"))
     {
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Number>("outputHeight"))
-        nDebugOutputHeight = options.get<jsonxx::Object>("gui").get<jsonxx::Number>("outputHeight");
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Number>("texturePreviewWidth"))
-        nTexPreviewWidth = options.get<jsonxx::Object>("gui").get<jsonxx::Number>("texturePreviewWidth");
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Number>("opacity"))
-        editorOptions.nOpacity = options.get<jsonxx::Object>("gui").get<jsonxx::Number>("opacity");
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Boolean>("spacesForTabs"))
-        editorOptions.bUseSpacesForTabs = options.get<jsonxx::Object>("gui").get<jsonxx::Boolean>("spacesForTabs");
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Number>("tabSize"))
-        editorOptions.nTabSize = options.get<jsonxx::Object>("gui").get<jsonxx::Number>("tabSize");
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Boolean>("visibleWhitespace"))
-        editorOptions.bVisibleWhitespace = options.get<jsonxx::Object>("gui").get<jsonxx::Boolean>("visibleWhitespace");
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::String>("autoIndent"))
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Number>("outputHeight"))
+        nDebugOutputHeight = opts.get<jsonxx::Object>("gui").get<jsonxx::Number>("outputHeight");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Number>("texturePreviewWidth"))
+        nTexPreviewWidth = opts.get<jsonxx::Object>("gui").get<jsonxx::Number>("texturePreviewWidth");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Number>("opacity"))
+        editorOptions.nOpacity = opts.get<jsonxx::Object>("gui").get<jsonxx::Number>("opacity");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Boolean>("spacesForTabs"))
+        editorOptions.bUseSpacesForTabs = opts.get<jsonxx::Object>("gui").get<jsonxx::Boolean>("spacesForTabs");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Number>("tabSize"))
+        editorOptions.nTabSize = opts.get<jsonxx::Object>("gui").get<jsonxx::Number>("tabSize");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Boolean>("visibleWhitespace"))
+        editorOptions.bVisibleWhitespace = opts.get<jsonxx::Object>("gui").get<jsonxx::Boolean>("visibleWhitespace");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::String>("autoIndent"))
       {
-        std::string autoIndent = options.get<jsonxx::Object>("gui").get<jsonxx::String>("autoIndent");
+        std::string autoIndent = opts.get<jsonxx::Object>("gui").get<jsonxx::String>("autoIndent");
         if (autoIndent == "smart") {
           editorOptions.eAutoIndent = aitSmart;
         } else if (autoIndent == "preserve") {
@@ -243,14 +237,14 @@ int main(int argc, const char *argv[])
           editorOptions.eAutoIndent = aitNone;
         }
       }
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Number>("scrollXFactor"))
-        fScrollXFactor = options.get<jsonxx::Object>("gui").get<jsonxx::Number>("scrollXFactor");
-      if (options.get<jsonxx::Object>("gui").has<jsonxx::Number>("scrollYFactor"))
-        fScrollYFactor = options.get<jsonxx::Object>("gui").get<jsonxx::Number>("scrollYFactor");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Number>("scrollXFactor"))
+        fScrollXFactor = opts.get<jsonxx::Object>("gui").get<jsonxx::Number>("scrollXFactor");
+      if (opts.get<jsonxx::Object>("gui").has<jsonxx::Number>("scrollYFactor"))
+        fScrollYFactor = opts.get<jsonxx::Object>("gui").get<jsonxx::Number>("scrollYFactor");
     }
-    if (options.has<jsonxx::Object>("theme"))
+    if (opts.has<jsonxx::Object>("theme"))
     {
-      const auto& theme = options.get<jsonxx::Object>("theme");
+      const auto& theme = opts.get<jsonxx::Object>("theme");
       if (theme.has<jsonxx::String>("text"))
         editorOptions.theme.text = ParseColor(theme.get<jsonxx::String>("text"));
       if (theme.has<jsonxx::String>("comment"))
@@ -274,19 +268,19 @@ int main(int argc, const char *argv[])
         editorOptions.theme.charBackground = ParseColor(theme.get<jsonxx::String>("charBackground"));
       }
     }
-    if (options.has<jsonxx::Object>("midi"))
+    if (opts.has<jsonxx::Object>("midi"))
     {
-      std::map<std::string, jsonxx::Value*> tex = options.get<jsonxx::Object>("midi").kv_map();
+      std::map<std::string, jsonxx::Value*> tex = opts.get<jsonxx::Object>("midi").kv_map();
       for (std::map<std::string, jsonxx::Value*>::iterator it = tex.begin(); it != tex.end(); it++)
       {
         midiRoutes[it->second->number_value_] = it->first;
       }
     }
-    if (options.has<jsonxx::String>("postExitCmd"))
+    if (opts.has<jsonxx::String>("postExitCmd"))
     {
-      sPostExitCmd = options.get<jsonxx::String>("postExitCmd");
+      sPostExitCmd = opts.get<jsonxx::String>("postExitCmd");
     }
-    Capture::LoadSettings( options );
+    Capture::LoadSettings( opts );
   }
   if (!editorOptions.sFontPath.size())
   {
@@ -460,7 +454,7 @@ int main(int argc, const char *argv[])
       {
         mShaderEditor.CommentSelection(ctLinesAll);
       }
-      else if (Renderer::keyEventBuffer[i].scanCode == 292 || (Renderer::keyEventBuffer[i].ctrl && Renderer::keyEventBuffer[i].scanCode == 'f')) // F11 or Ctrl/Cmd-f  
+      else if (Renderer::keyEventBuffer[i].scanCode == 292 || (Renderer::keyEventBuffer[i].ctrl && Renderer::keyEventBuffer[i].scanCode == 'f')) // F11 or Ctrl/Cmd-f
       {
         bShowGui = !bShowGui;
       }
-- 
2.25.0

